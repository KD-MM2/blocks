{
    "id": "faq12",
    "access": "pro",
    "weight": 999,
    "disabled": false,
    "draft": false,
    "screenshot": "faq12.jpg",
    "thumbnail": "faq12-4x3.webp",
    "description": "An FAQ component displaying questions under categories with a clickable sidebar for navigation. Features include dynamic active state updates and smooth scrolling.",
    "createdAt": "2025-01-23T06:56:18.577Z",
    "dependencies": [
        "react"
    ],
    "registryDependencies": [
        {
            "name": "accordion",
            "registryId": "shadcn",
            "registryItemUrl": "accordion",
            "docsUrl": "https://ui.shadcn.com/docs/components/accordion"
        },
        {
            "name": "button",
            "registryId": "shadcn",
            "registryItemUrl": "button",
            "docsUrl": "https://ui.shadcn.com/docs/components/button"
        }
    ],
    "attrs": {
        "type": "block",
        "group": [
            "faq"
        ],
        "price": [
            "pro"
        ],
        "release": [
            "Feb 2025"
        ],
        "registryIds": [
            "shadcn"
        ]
    },
    "figma": false,
    "slug": "faq12",
    "collection": "block",
    "group": "faq",
    "code": "\"use client\";\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Button } from \"@/components/ui/button\";\n\ntype Category = \"Support\" | \"Account\" | \"Features\" | \"Security\" | \"Other\";\n\ninterface FAQItem {\n  question: string;\n  answer: string;\n  category: Category;\n}\n\nconst faqItems: FAQItem[] = [\n  // Support Questions\n  {\n    category: \"Support\",\n    question: \"Is there a free version?\",\n    answer:\n      \"Yes! We offer a generous free plan with just enough features except that one feature you really want! Our strategy is to get your credit card details on file then steadily double our prices against inflation rates.\",\n  },\n  {\n    category: \"Support\",\n    question: \"Is support free, or do I need to Perplexity everything?\",\n    answer:\n      \"We pride ourselves on our comprehensive support system. Our chatbot will happily redirect you to our documentation, which will then redirect you back to the chatbot.\",\n  },\n  {\n    category: \"Support\",\n    question: \"What if I need immediate assistance?\",\n    answer:\n      \"Our AI support team will get back to you in approximately 3-5 business years.\",\n  },\n  // Account Questions\n  {\n    category: \"Account\",\n    question: \"How do I update my account without breaking my laptop?\",\n    answer:\n      \"Our platform is designed to be extremely user-friendly. Just follow our simple 47-step process, and you should be fine!\",\n  },\n  {\n    category: \"Account\",\n    question: \"How do I update my account without breaking the universe?\",\n    answer: \"Just be very careful not to press any buttons too hard.\",\n  },\n  {\n    category: \"Account\",\n    question: \"What happens if I forget my password?\",\n    answer: \"You'll need to solve three riddles and defeat a dragon.\",\n  },\n  // Features Questions\n  {\n    category: \"Features\",\n    question: \"Are you going to be subsumed by AI?\",\n    answer:\n      \"Probably! But until then, we'll keep pretending we're irreplaceable.\",\n  },\n  {\n    category: \"Features\",\n    question: \"What makes your platform unique?\",\n    answer:\n      \"We use at least 7 different types of AI, and none of them work together!\",\n  },\n  {\n    category: \"Features\",\n    question: \"Do you support integration with other tools?\",\n    answer: \"We integrate with everything except the tools you actually use.\",\n  },\n  // Security Questions\n  {\n    category: \"Security\",\n    question: \"How secure is my data?\",\n    answer:\n      'We use military-grade encryption, but our password is \"password123\".',\n  },\n  {\n    category: \"Security\",\n    question: \"What happens in case of a data breach?\",\n    answer:\n      \"We'll send you a very apologetic email with a $5 gift card to your local coffee shop.\",\n  },\n  {\n    category: \"Security\",\n    question: \"Do you have a backup system?\",\n    answer:\n      \"Yes, we back up everything to a USB stick that we keep in a very safe place... somewhere.\",\n  },\n  // Other Questions\n  {\n    category: \"Other\",\n    question: \"Why is your pricing so complicated?\",\n    answer:\n      \"Because simple pricing would make it too easy for you to understand what you're paying for.\",\n  },\n  {\n    category: \"Other\",\n    question: \"Do you offer refunds?\",\n    answer:\n      \"Yes, but only if you can prove you're from an alternate dimension.\",\n  },\n  {\n    category: \"Other\",\n    question: \"What's your roadmap look like?\",\n    answer: \"It's more of a road-squiggle, really. We're agile!\",\n  },\n];\n\nconst categories: Category[] = [\n  \"Support\",\n  \"Account\",\n  \"Features\",\n  \"Security\",\n  \"Other\",\n];\n\nconst TOP_PADDING = 300;\n\nconst Faq12 = () => {\n  const [activeCategory, setActiveCategory] = useState<Category>(\"Support\");\n  const observerRef = useRef<IntersectionObserver | null>(null);\n  const isScrollingRef = useRef(false);\n  const categoryRefs = useRef<Record<Category, HTMLDivElement | null>>({\n    Support: null,\n    Account: null,\n    Features: null,\n    Security: null,\n    Other: null,\n  });\n\n  const setupObserver = useCallback(() => {\n    observerRef.current?.disconnect();\n\n    let debounceTimeout: NodeJS.Timeout;\n\n    observerRef.current = new IntersectionObserver(\n      (entries) => {\n        // Skip if we're programmatically scrolling\n        if (isScrollingRef.current) return;\n\n        // Clear any pending timeout\n        if (debounceTimeout) {\n          clearTimeout(debounceTimeout);\n        }\n\n        // Debounce the category update\n        debounceTimeout = setTimeout(() => {\n          const intersectingEntries = entries.filter(\n            (entry) => entry.isIntersecting,\n          );\n\n          // Find the entry that's closest to being 100px from the top\n          const entry = intersectingEntries.reduce(\n            (closest, current) => {\n              const rect = current.boundingClientRect;\n              const distanceFromThreshold = Math.abs(rect.top - TOP_PADDING);\n              const closestDistance = closest\n                ? Math.abs(closest.boundingClientRect.top - TOP_PADDING)\n                : Infinity;\n\n              return distanceFromThreshold < closestDistance\n                ? current\n                : closest;\n            },\n            null as IntersectionObserverEntry | null,\n          );\n\n          if (entry) {\n            const category = entry.target.getAttribute(\n              \"data-category\",\n            ) as Category;\n            if (category) {\n              setActiveCategory(category);\n            }\n          }\n        }, 150);\n      },\n      {\n        root: null,\n        rootMargin: `-${TOP_PADDING}px 0px -100% 0px`,\n        threshold: [0, 0.25, 0.5, 0.75, 1],\n      },\n    );\n\n    Object.entries(categoryRefs.current).forEach(([category, element]) => {\n      if (element) {\n        element.setAttribute(\"data-category\", category);\n        observerRef.current?.observe(element);\n      }\n    });\n\n    return () => {\n      if (debounceTimeout) {\n        clearTimeout(debounceTimeout);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const cleanup = setupObserver();\n    return () => {\n      cleanup();\n      observerRef.current?.disconnect();\n    };\n  }, [setupObserver]);\n\n  const handleCategoryClick = (category: Category) => {\n    setActiveCategory(category);\n    isScrollingRef.current = true;\n\n    const element = document.getElementById(`faq-${category.toLowerCase()}`);\n    if (element) {\n      element.style.scrollMargin = `${TOP_PADDING}px`;\n      element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n\n      setTimeout(() => {\n        isScrollingRef.current = false;\n      }, 1000);\n    }\n  };\n\n  return (\n    <section className=\"min-h-screen bg-[#F2F2F2] py-32 dark:bg-[#24242B]\">\n      <div className=\"container max-w-4xl\">\n        <div className=\"text-center\">\n          <h1 className=\"text-center text-4xl font-semibold tracking-tight sm:text-5xl\">\n            We've got answers\n          </h1>\n          <p className=\"mx-auto mt-4 max-w-xl text-center text-balance text-muted-foreground\">\n            This really should be an LLM but we're waiting for RAG to truly\n            reach commodity stage before we touch it.\n          </p>\n        </div>\n\n        <div className=\"mt-8 grid max-w-5xl gap-8 md:mt-12 md:grid-cols-[200px_1fr] md:gap-12 lg:mt-16\">\n          {/* Sidebar */}\n          <div className=\"sticky top-24 flex h-fit flex-col gap-4 max-md:hidden\">\n            {categories.map((category) => (\n              <Button\n                variant=\"ghost\"\n                key={category}\n                onClick={() => handleCategoryClick(category)}\n                className={`justify-start text-left text-xl transition-colors ${\n                  activeCategory === category\n                    ? \"font-semibold\"\n                    : \"font-normal hover:opacity-75\"\n                }`}\n              >\n                {category}\n              </Button>\n            ))}\n          </div>\n\n          {/* FAQ Items by Category */}\n          <div className=\"space-y-6\">\n            {categories.map((category) => {\n              const categoryItems = faqItems.filter(\n                (item) => item.category === category,\n              );\n\n              return (\n                <div\n                  key={category}\n                  id={`faq-${category.toLowerCase()}`}\n                  ref={(el) => {\n                    categoryRefs.current[category] = el;\n                  }}\n                  className={cn(\n                    `rounded-xl`,\n                    activeCategory === category\n                      ? \"bg-background\"\n                      : \"bg-background/40\",\n                    \"px-6\",\n                  )}\n                  style={{\n                    scrollMargin: `${TOP_PADDING}px`,\n                  }}\n                >\n                  <Accordion\n                    type=\"single\"\n                    collapsible\n                    defaultValue={`${categories[0]}-0`}\n                    className=\"w-full\"\n                  >\n                    {categoryItems.map((item, i) => (\n                      <AccordionItem\n                        key={i}\n                        value={`${category}-${i}`}\n                        className=\"border-b border-muted last:border-0\"\n                      >\n                        <AccordionTrigger className=\"text-base font-medium hover:no-underline\">\n                          {item.question}\n                        </AccordionTrigger>\n                        <AccordionContent className=\"text-base font-medium text-muted-foreground\">\n                          {item.answer}\n                        </AccordionContent>\n                      </AccordionItem>\n                    ))}\n                  </Accordion>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport { Faq12 };\n"
}