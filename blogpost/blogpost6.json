{
    "id": "blogpost6",
    "access": "pro",
    "weight": 999,
    "disabled": false,
    "draft": false,
    "screenshot": "blogpost6.jpg",
    "thumbnail": "blogpost6-4x3.webp",
    "description": "A blog post component with dynamic breadcrumb navigation, author bio, social sharing, and interactive chapter selection.",
    "createdAt": "2025-04-30T03:08:16.801Z",
    "dependencies": [
        "lucide-react",
        "react"
    ],
    "registryDependencies": [
        {
            "name": "avatar",
            "registryId": "shadcn",
            "registryItemUrl": "avatar",
            "docsUrl": "https://ui.shadcn.com/docs/components/avatar"
        },
        {
            "name": "breadcrumb",
            "registryId": "shadcn",
            "registryItemUrl": "breadcrumb",
            "docsUrl": "https://ui.shadcn.com/docs/components/breadcrumb"
        },
        {
            "name": "button",
            "registryId": "shadcn",
            "registryItemUrl": "button",
            "docsUrl": "https://ui.shadcn.com/docs/components/button"
        }
    ],
    "attrs": {
        "type": "block",
        "group": [
            "blogpost"
        ],
        "price": [
            "pro"
        ],
        "release": [
            "May 2025"
        ],
        "registryIds": [
            "shadcn"
        ]
    },
    "figma": false,
    "slug": "blogpost6",
    "collection": "block",
    "group": "blogpost",
    "code": "\"use client\";\nimport { Linkedin, LucideIcon, Twitter } from \"lucide-react\";\nimport { Fragment, useEffect, useState } from \"react\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface BreadcrumbItem {\n  label: string;\n  link: string;\n}\n\ninterface BreadcrumbBlogProps {\n  breadcrumb: Array<BreadcrumbItem>;\n}\n\ninterface AuthorType {\n  image?: string;\n  name: string;\n  job: string;\n  description: string;\n  socials: {\n    icon: LucideIcon;\n    url: string;\n  }[];\n}\n\nconst AUTHOR: AuthorType = {\n  image: \"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/avatar-1.webp\",\n  name: \"Jane Doe\",\n  job: \"CEO & Cofounder\",\n  description:\n    \"An avid storyteller with a passion for crafting compelling narratives, love to explore the human experience through vivid characters and thought-provoking themes. \",\n  socials: [\n    {\n      icon: Twitter,\n      url: \"#\",\n    },\n    {\n      icon: Linkedin,\n      url: \"#\",\n    },\n  ],\n};\n\nconst BREADCRUMB: Array<BreadcrumbItem> = [\n  {\n    label: \"Resources\",\n    link: \"#\",\n  },\n  {\n    label: \"Blogs\",\n    link: \"#\",\n  },\n];\n\nconst SHARE_LINKS = [\n  {\n    icon: Twitter,\n    url: \"#\",\n  },\n  {\n    icon: Linkedin,\n    url: \"#\",\n  },\n];\n\nconst ARTICLE_DATE = \"May 18, 2025\";\nconst ARTICLE_DURATION = \"10 min read\";\n\nconst Blogpost6 = () => {\n  const [activeId, setActiveId] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Query all h2 elements with IDs that match the chapter anchors\n    const chapterIds = [\"heading-1\", \"heading-2\", \"heading-3\"];\n    const headingElements = chapterIds\n      .map((id) => document.getElementById(id))\n      .filter(Boolean) as HTMLElement[];\n\n    const observer = new window.IntersectionObserver(\n      (entries) => {\n        const visible = entries.find((entry) => entry.isIntersecting);\n        if (visible) {\n          setActiveId(visible.target.id);\n        }\n      },\n      {\n        rootMargin: \"0px 0px -30% 0px\",\n        threshold: 0.1,\n      },\n    );\n\n    headingElements.forEach((el) => observer.observe(el));\n\n    return () => observer.disconnect();\n  }, []);\n\n  return (\n    <section className=\"pb-32\">\n      <div className=\"bg-muted bg-[url('https://deifkwefumgah.cloudfront.net/shadcnblocks/block/patterns/dot-pattern-2.svg')] bg-[length:3.125rem_3.125rem] bg-repeat py-20\">\n        <div className=\"container flex flex-col items-start justify-start gap-16 py-20 lg:flex-row lg:items-end lg:justify-between\">\n          <div className=\"flex w-full flex-col items-center justify-center gap-12\">\n            <div className=\"flex w-full max-w-[36rem] flex-col items-center justify-center gap-8\">\n              <BreadcrumbBlog breadcrumb={BREADCRUMB} />\n              <div className=\"flex w-full flex-col gap-5\">\n                <div className=\"text-muted-2-foreground flex items-center justify-center gap-2.5 text-sm font-medium\">\n                  <div>{ARTICLE_DURATION}</div>\n                  <div>|</div>\n                  <div>{ARTICLE_DATE}</div>\n                </div>\n                <h1 className=\"text-center text-[2.5rem] font-semibold leading-[1.2] md:text-5xl lg:text-6xl\">\n                  Building Better Components\n                </h1>\n                <p className=\"text-foreground text-center text-xl font-semibold leading-[1.4]\">\n                  The best blog is one that captivates readers with engaging,\n                  well-researched content presented in a clear and relatable\n                  way.\n                </p>\n                <div className=\"flex items-center justify-center gap-2.5\">\n                  {SHARE_LINKS.map((link, index) => (\n                    <Button asChild key={`share-link-${index}`} size=\"icon\">\n                      <a href={link.url}>\n                        <link.icon />\n                      </a>\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container pt-20\">\n        <div className=\"relative mx-auto w-full max-w-5xl items-start justify-between gap-20 lg:flex\">\n          {/* Chapters */}\n          <div className=\"bg-background top-20 flex-1 pb-10 lg:sticky lg:pb-0\">\n            <div className=\"text-xl font-medium leading-snug\">Chapters</div>\n            <div className=\"flex flex-col gap-2 pl-2 pt-2\">\n              <a\n                href=\"#heading-1\"\n                className={`text-muted-foreground block text-sm font-medium leading-normal transition duration-300 ${activeId === \"heading-1\" ? \"lg:bg-muted lg:!text-primary lg:rounded-md lg:p-2 lg:font-bold\" : \"text-muted-foreground\"}`}\n              >\n                The Role of UI Components in Development\n              </a>\n              <a\n                href=\"#heading-2\"\n                className={`text-muted-foreground block text-sm font-medium leading-normal transition duration-300 ${activeId === \"heading-2\" ? \"lg:bg-muted lg:!text-primary lg:rounded-md lg:p-2 lg:font-bold\" : \"text-muted-foreground\"}`}\n              >\n                Core Types of UI Components\n              </a>\n              <a\n                href=\"#heading-3\"\n                className={`text-muted-foreground block text-sm font-medium leading-normal transition duration-300 ${activeId === \"heading-3\" ? \"lg:bg-muted lg:!text-primary lg:rounded-md lg:p-2 lg:font-bold\" : \"text-muted-foreground\"}`}\n              >\n                End Paragraph\n              </a>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"flex w-full max-w-[40rem] flex-col gap-10\">\n            <Author author={AUTHOR} />\n            <div className=\"prose dark:prose-invert\">\n              <h2>Key Takeaways</h2>\n              <p>\n                \u2022 UI components are foundational, reusable elements in web\n                development that encapsulate both design and behavior to promote\n                consistency and efficiency.\n              </p>\n              <p>\n                \u2022 Leveraging component libraries and frameworks streamlines the\n                development process and ensures accessibility and cross-device\n                compatibility.\n              </p>\n              <p>\n                \u2022 Understanding different types of UI components enables\n                developers to create structured, scalable, and maintainable user\n                interfaces.\n              </p>\n\n              <p>\n                In the evolving landscape of modern web development, UI\n                components have emerged as indispensable tools for crafting\n                user-friendly interfaces. These components, ranging from simple\n                buttons to complex data tables, are the building blocks that\n                help shape the overall user experience. By modularizing the\n                interface into smaller, manageable pieces, UI components not\n                only streamline the development process but also promote\n                consistency across an application's design. As digital products\n                become more complex, the role of well-structured UI components\n                becomes even more critical in meeting user expectations and\n                maintaining code quality.\n              </p>\n              <h2 id=\"heading-1\" className=\"scroll-mt-24\">\n                The Role of UI Components in Development\n              </h2>\n              <p>\n                UI components serve as self-contained units of functionality and\n                presentation, often designed to be reused across multiple parts\n                of an application. By encapsulating both logic and styling,\n                components reduce duplication and improve the maintainability of\n                codebases. For example, a single button component can be reused\n                with different props or styles, ensuring a uniform look and feel\n                throughout the application. This modular approach also allows\n                for parallel development, where teams can work on separate\n                components without interfering with each other's work.\n              </p>\n              <p>\n                Popular frameworks like React, Vue, and Angular are built around\n                component-based architectures, encouraging developers to think\n                in terms of reusable blocks rather than monolithic pages. This\n                shift not only enhances scalability but also simplifies testing\n                and debugging. Additionally, many UI libraries such as Material\n                UI, Chakra UI, and Radix UI provide pre-built, accessible\n                components that accelerate development and ensure consistency\n                with design systems. Embracing components as first-class\n                citizens in frontend architecture leads to better code\n                organization, faster prototyping, and a more seamless user\n                experience.\n              </p>\n              <h2 id=\"heading-2\" className=\"scroll-mt-24\">\n                Core Types of UI Components\n              </h2>\n              <h3>1. Input Components</h3>\n              <p>\n                Input components are interactive elements that allow users to\n                provide information. These include text inputs, checkboxes,\n                radio buttons, sliders, and file upload fields. They are\n                essential in forms and user settings, enabling data collection\n                and customization. A well-designed input component handles\n                validation, displays feedback, and provides a seamless\n                experience across different devices and screen readers, ensuring\n                inclusivity and usability.\n              </p>\n              <a href=\"#\">Explore more</a>\n              <div className=\"w-full max-w-[40rem] overflow-hidden\">\n                <img\n                  src=\"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/placeholder-1.svg\"\n                  alt=\"\"\n                  className=\"size-full object-cover object-center\"\n                />\n              </div>\n              <h3>2. Navigation Components</h3>\n              <p>\n                Navigation components guide users through an application's\n                structure. These include elements like top bars, side menus,\n                breadcrumbs, tabs, and pagination. Effective navigation improves\n                discoverability and helps users find the content they need\n                without friction. Good navigation design considers user flow,\n                accessibility (such as keyboard navigation and ARIA labels), and\n                responsiveness, ensuring the interface is intuitive and adaptive\n                to various screen sizes.\n              </p>\n              <div className=\"w-full max-w-[40rem] overflow-hidden\">\n                <img\n                  src=\"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/placeholder-2.svg\"\n                  alt=\"\"\n                  className=\"size-full object-cover object-center\"\n                />\n              </div>\n              <h3>3. Feedback Components</h3>\n              <p>\n                Feedback components provide users with visual or textual cues in\n                response to their actions. Examples include modals, toast\n                notifications, progress bars, and tooltips. These elements\n                inform users about the success or failure of their operations or\n                alert them to required actions. They enhance interactivity and\n                reduce confusion, especially when performing asynchronous\n                actions like form submissions or file uploads.\n              </p>\n              <div className=\"w-full max-w-[40rem] overflow-hidden\">\n                <img\n                  src=\"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/placeholder-3.svg\"\n                  alt=\"\"\n                  className=\"size-full object-cover object-center\"\n                />\n              </div>\n              <h3>4. Layout Components</h3>\n              <p>\n                Layout components organize content visually on the page. Common\n                examples include containers, rows, columns, and grid systems.\n                These components help define the structure of a page and control\n                the spacing, alignment, and responsiveness of child elements. A\n                strong layout system ensures consistency in visual hierarchy and\n                supports scalability as the application grows in complexity.\n              </p>\n              <div className=\"w-full max-w-[40rem] overflow-hidden\">\n                <img\n                  src=\"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/placeholder-4.svg\"\n                  alt=\"\"\n                  className=\"size-full object-cover object-center\"\n                />\n              </div>\n              <h2 id=\"heading-3\" className=\"scroll-mt-24\">\n                End Paragraph\n              </h2>\n              <p>\n                Mastering the use of UI components is a key step toward building\n                reliable, scalable, and aesthetically consistent web\n                applications. By breaking down interfaces into smaller parts,\n                developers can achieve greater flexibility, encourage reuse, and\n                reduce the likelihood of errors. UI components also bridge the\n                gap between design and development, creating a more\n                collaborative and efficient workflow that benefits both\n                developers and end users.\n              </p>\n            </div>\n\n            {/* Conclusion */}\n            <div className=\"prose dark:prose-invert bg-muted rounded-lg p-5 [&>h2]:mt-0\">\n              <h2>Conclusion</h2>\n              <p>\n                UI components are more than just visual elements\u2014they are\n                strategic assets in a modern developer's toolkit. When designed\n                thoughtfully and used effectively, they empower teams to deliver\n                high-quality interfaces with speed, consistency, and confidence.\n                As frontend development continues to evolve, investing in\n                reusable, accessible, and well-documented UI components will\n                remain essential for building user-centric, maintainable digital\n                products.\n              </p>\n            </div>\n\n            {/* Author */}\n            <div className=\"bg-muted flex flex-col gap-4 rounded-lg p-5\">\n              <Author author={AUTHOR} />\n              <p>{AUTHOR.description}</p>\n              <div className=\"flex items-center gap-2.5\">\n                {AUTHOR.socials.map((link, index) => (\n                  <Button asChild key={`author-socials-${index}`} size=\"icon\">\n                    <a href={link.url}>\n                      <link.icon />\n                    </a>\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nconst Author = ({ author }: { author: AuthorType }) => {\n  return (\n    <div className=\"flex items-center gap-2.5\">\n      <Avatar className=\"size-12 border\">\n        <AvatarImage src={author.image} alt={author.name} />\n        <AvatarFallback>{author.name}</AvatarFallback>\n      </Avatar>\n      <div>\n        <div className=\"text-sm font-normal leading-normal\">{author.name}</div>\n        <div className=\"text-muted-foreground text-sm font-normal leading-normal\">\n          {author.job}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst BreadcrumbBlog = ({ breadcrumb }: BreadcrumbBlogProps) => {\n  return (\n    <Breadcrumb>\n      <BreadcrumbList>\n        {breadcrumb.map((item, i) => {\n          return (\n            <Fragment key={`${item.label}`}>\n              <BreadcrumbItem>\n                <BreadcrumbLink href={item.link}>{item.label}</BreadcrumbLink>\n              </BreadcrumbItem>\n              {i < breadcrumb.length - 1 ? (\n                <BreadcrumbSeparator>/</BreadcrumbSeparator>\n              ) : null}\n            </Fragment>\n          );\n        })}\n      </BreadcrumbList>\n    </Breadcrumb>\n  );\n};\n\nexport { Blogpost6 };\n"
}