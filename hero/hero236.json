{
    "id": "hero236",
    "access": "pro",
    "weight": 999,
    "disabled": false,
    "draft": false,
    "screenshot": "hero236.jpg",
    "thumbnail": "hero236-4x3.webp",
    "description": "A component features a dynamic, interactive 3D cloud of icons and statistics highlighting key metrics. It splits into two main sections: one side lists achievements using icons and numbers, and the other displays a rotating, interactive cloud of technology icons.",
    "createdAt": [
        3,
        "2025-08-28T06:52:31.977Z"
    ],
    "dependencies": [
        "lucide-react",
        "react",
        "react-dom"
    ],
    "registryDependencies": [],
    "attrs": {
        "type": "block",
        "group": [
            "hero"
        ],
        "price": [
            "pro"
        ],
        "release": [
            "Aug 2025"
        ],
        "registryIds": []
    },
    "figma": true,
    "slug": "hero236",
    "collection": "block",
    "group": "hero",
    "code": "\"use client\";\n\nimport { Shield, Users, Zap } from \"lucide-react\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { renderToString } from \"react-dom/server\";\n\nconst slugs = [\n  \"typescript\",\n  \"javascript\",\n  \"dart\",\n  \"java\",\n  \"react\",\n  \"flutter\",\n  \"android\",\n  \"html5\",\n  \"css3\",\n  \"nodedotjs\",\n  \"express\",\n  \"nextdotjs\",\n  \"prisma\",\n  \"amazonaws\",\n  \"postgresql\",\n  \"firebase\",\n  \"nginx\",\n  \"vercel\",\n  \"testinglibrary\",\n  \"jest\",\n  \"cypress\",\n  \"docker\",\n  \"git\",\n  \"jira\",\n  \"github\",\n  \"gitlab\",\n  \"visualstudiocode\",\n  \"androidstudio\",\n  \"sonarqube\",\n  \"figma\",\n];\n\nconst Hero236 = () => {\n  const stats = [\n    {\n      icon: <Users className=\"size-6 stroke-1 opacity-20 md:size-10\" />,\n      title: \"+100k\",\n      description: \"Daily Users\",\n    },\n    {\n      icon: <Zap className=\"size-6 stroke-1 opacity-20 md:size-10\" />,\n      title: \"99.9%\",\n      description: \"Uptime \",\n    },\n    {\n      icon: <Shield className=\"size-6 stroke-1 opacity-20 md:size-10\" />,\n      title: \"24/7\",\n      description: \" Support\",\n    },\n  ];\n\n  const images = slugs.map(\n    (slug) => `https://cdn.simpleicons.org/${slug}/${slug}`,\n  );\n\n  return (\n    <section className=\"relative w-screen overflow-hidden py-32\">\n      <div className=\"container flex flex-col lg:flex-row\">\n        <div className=\"mt-10 space-y-12 lg:w-1/2\">\n          <p className=\"bg-muted w-fit rounded-full px-4 py-1 text-sm uppercase\">\n            Why Us?\n          </p>\n          <h1 className=\"font-calSans mt-3 max-w-lg text-6xl font-medium lg:text-7xl\">\n            <span className=\"opacity-30\">The Only blocks</span> you need\n          </h1>\n          <p className=\"text-muted-foreground max-w-lg text-lg\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua.\n          </p>\n\n          <ul className=\"mt-18 flex flex-wrap gap-9\">\n            {stats.map((stat, index) => (\n              <li key={stat.title} className=\"flex items-center gap-4\">\n                <div className=\"md:size-18 flex size-12 items-center justify-center rounded-2xl border\">\n                  {stat.icon}\n                </div>\n                <div>\n                  <h2 className=\"font-calSans text-2xl font-medium md:text-3xl\">\n                    {stat.title}\n                  </h2>\n                  <p className=\"text-sm md:text-base\">{stat.description}</p>\n                </div>\n                {index !== stats.length - 1 && (\n                  <div className=\"via-border ml-4 h-full w-px bg-gradient-to-t from-black to-transparent\" />\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"flex h-[500px] w-full items-center justify-center overflow-hidden lg:w-1/2\">\n          <div className=\"absolute flex h-full w-full items-center justify-center\">\n            <IconCloud images={images} />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport { Hero236 };\n\n// Below is the modified component from magic UI\n// Original source: npx shadcn@latest add npx shadcn@latest add \"https://magicui.design/r/icon-cloud\"\n// Modified to follow our coding standards and design system\n// We respect copyright and attribution to the original creators\n\ninterface Icon {\n  x: number;\n  y: number;\n  z: number;\n  scale: number;\n  opacity: number;\n  id: number;\n}\n\ninterface IconCloudProps {\n  icons?: React.ReactNode[];\n  images?: string[];\n}\n\nfunction easeOutCubic(t: number): number {\n  return 1 - Math.pow(1 - t, 3);\n}\n\nexport function IconCloud({ icons, images }: IconCloudProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [iconPositions, setIconPositions] = useState<Icon[]>([]);\n  const [rotation ] = useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [lastMousePos, setLastMousePos] = useState({ x: 0, y: 0 });\n  const [mousePos, setMousePos] = useState({ x: 0, y: 0 });\n  const [targetRotation, setTargetRotation] = useState<{\n    x: number;\n    y: number;\n    startX: number;\n    startY: number;\n    distance: number;\n    startTime: number;\n    duration: number;\n  } | null>(null);\n  const animationFrameRef = useRef<number>(0);\n  const rotationRef = useRef(rotation);\n  const iconCanvasesRef = useRef<HTMLCanvasElement[]>([]);\n  const imagesLoadedRef = useRef<boolean[]>([]);\n\n  // Create icon canvases once when icons/images change\n  useEffect(() => {\n    if (!icons && !images) return;\n\n    const items = icons || images || [];\n    imagesLoadedRef.current = new Array(items.length).fill(false);\n\n    const newIconCanvases = items.map((item, index) => {\n      const offscreen = document.createElement(\"canvas\");\n      offscreen.width = 40;\n      offscreen.height = 40;\n      const offCtx = offscreen.getContext(\"2d\");\n\n      if (offCtx) {\n        if (images) {\n          // Handle image URLs directly\n          const img = new Image();\n          img.crossOrigin = \"anonymous\";\n          img.src = items[index] as string;\n          img.onload = () => {\n            offCtx.clearRect(0, 0, offscreen.width, offscreen.height);\n\n            // Create circular clipping path\n            offCtx.beginPath();\n            offCtx.arc(20, 20, 20, 0, Math.PI * 2);\n            offCtx.closePath();\n            offCtx.clip();\n\n            // Draw the image\n            offCtx.drawImage(img, 0, 0, 40, 40);\n\n            imagesLoadedRef.current[index] = true;\n          };\n        } else {\n          // Handle SVG icons\n          offCtx.scale(0.4, 0.4);\n          const svgString = renderToString(item as React.ReactElement);\n          const img = new Image();\n          img.src = \"data:image/svg+xml;base64,\" + btoa(svgString);\n          img.onload = () => {\n            offCtx.clearRect(0, 0, offscreen.width, offscreen.height);\n            offCtx.drawImage(img, 0, 0);\n            imagesLoadedRef.current[index] = true;\n          };\n        }\n      }\n      return offscreen;\n    });\n\n    iconCanvasesRef.current = newIconCanvases;\n  }, [icons, images]);\n\n  // Generate initial icon positions on a sphere\n  useEffect(() => {\n    const items = icons || images || [];\n    const newIcons: Icon[] = [];\n    const numIcons = items.length || 20;\n\n    // Fibonacci sphere parameters\n    const offset = 2 / numIcons;\n    const increment = Math.PI * (3 - Math.sqrt(5));\n\n    for (let i = 0; i < numIcons; i++) {\n      const y = i * offset - 1 + offset / 2;\n      const r = Math.sqrt(1 - y * y);\n      const phi = i * increment;\n\n      const x = Math.cos(phi) * r;\n      const z = Math.sin(phi) * r;\n\n      newIcons.push({\n        x: x * 180,\n        y: y * 180,\n        z: z * 180,\n        scale: 1,\n        opacity: 1,\n        id: i,\n      });\n    }\n    setIconPositions(newIcons);\n  }, [icons, images]);\n\n  // Handle mouse events\n  const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const rect = canvasRef.current?.getBoundingClientRect();\n    if (!rect || !canvasRef.current) return;\n\n    const x = e.clientX + rect.left;\n    const y = e.clientY + rect.top;\n\n    const ctx = canvasRef.current.getContext(\"2d\");\n    if (!ctx) return;\n\n    iconPositions.forEach((icon) => {\n      const cosX = Math.cos(rotationRef.current.x);\n      const sinX = Math.sin(rotationRef.current.x);\n      const cosY = Math.cos(rotationRef.current.y);\n      const sinY = Math.sin(rotationRef.current.y);\n\n      const rotatedX = icon.x * cosY - icon.z * sinY;\n      const rotatedZ = icon.x * sinY + icon.z * cosY;\n      const rotatedY = icon.y * cosX + rotatedZ * sinX;\n\n      const screenX = canvasRef.current!.width / 2 + rotatedX;\n      const screenY = canvasRef.current!.height / 2 + rotatedY;\n\n      const scale = (rotatedZ + 200) / 300;\n      const radius = 20 * scale;\n      const dx = x - screenX;\n      const dy = y - screenY;\n\n      if (dx * dx + dy * dy < radius * radius) {\n        const targetX = -Math.atan2(\n          icon.y,\n          Math.sqrt(icon.x * icon.x + icon.z * icon.z),\n        );\n        const targetY = Math.atan2(icon.x, icon.z);\n\n        const currentX = rotationRef.current.x;\n        const currentY = rotationRef.current.y;\n        const distance = Math.sqrt(\n          Math.pow(targetX - currentX, 2) + Math.pow(targetY - currentY, 2),\n        );\n\n        const duration = Math.min(2000, Math.max(800, distance * 1000));\n\n        setTargetRotation({\n          x: targetX,\n          y: targetY,\n          startX: currentX,\n          startY: currentY,\n          distance,\n          startTime: performance.now(),\n          duration,\n        });\n        return;\n      }\n    });\n\n    setIsDragging(true);\n    setLastMousePos({ x: e.clientX, y: e.clientY });\n  };\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const rect = canvasRef.current?.getBoundingClientRect();\n    if (rect) {\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n      setMousePos({ x, y });\n    }\n\n    if (isDragging) {\n      const deltaX = e.clientX - lastMousePos.x;\n      const deltaY = e.clientY - lastMousePos.y;\n\n      rotationRef.current = {\n        x: rotationRef.current.x + deltaY * 0.002,\n        y: rotationRef.current.y + deltaX * 0.002,\n      };\n\n      setLastMousePos({ x: e.clientX, y: e.clientY });\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  // Animation and rendering\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext(\"2d\");\n    if (!canvas || !ctx) return;\n\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      const maxDistance = Math.sqrt(centerX * centerX + centerY * centerY);\n      const dx = mousePos.x + centerX;\n      const dy = mousePos.y + centerY;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      const speed = 0.005 + (distance / maxDistance) * 0.01;\n\n      if (targetRotation) {\n        const elapsed = performance.now() - targetRotation.startTime;\n        const progress = Math.min(1, elapsed / targetRotation.duration);\n        const easedProgress = easeOutCubic(progress);\n\n        rotationRef.current = {\n          x:\n            targetRotation.startX +\n            (targetRotation.x - targetRotation.startX) * easedProgress,\n          y:\n            targetRotation.startY +\n            (targetRotation.y - targetRotation.startY) * easedProgress,\n        };\n\n        if (progress >= 1) {\n          setTargetRotation(null);\n        }\n      } else if (!isDragging) {\n        rotationRef.current = {\n          x: rotationRef.current.x + (dy / canvas.height) * speed,\n          y: rotationRef.current.y + (dx / canvas.width) * speed,\n        };\n      }\n\n      iconPositions.forEach((icon, index) => {\n        const cosX = Math.cos(rotationRef.current.x);\n        const sinX = Math.sin(rotationRef.current.x);\n        const cosY = Math.cos(rotationRef.current.y);\n        const sinY = Math.sin(rotationRef.current.y);\n\n        const rotatedX = icon.x * cosY - icon.z * sinY;\n        const rotatedZ = icon.x * sinY + icon.z * cosY;\n        const rotatedY = icon.y * cosX + rotatedZ * sinX;\n\n        const scale = (rotatedZ + 200) / 300;\n        const opacity = Math.max(0.2, Math.min(1, (rotatedZ + 150) / 200));\n\n        ctx.save();\n        ctx.translate(\n          canvas.width / 2 + rotatedX,\n          canvas.height / 2 + rotatedY,\n        );\n        ctx.scale(scale, scale);\n        ctx.globalAlpha = opacity;\n\n        if (icons || images) {\n          // Only try to render icons/images if they exist\n          if (\n            iconCanvasesRef.current[index] &&\n            imagesLoadedRef.current[index]\n          ) {\n            ctx.drawImage(iconCanvasesRef.current[index], -20, -20, 50, 50);\n          }\n        } else {\n          // Show numbered circles if no icons/images are provided\n          ctx.beginPath();\n          ctx.arc(0, 0, 20, 0, Math.PI * 2);\n          ctx.fillStyle = \"#4444ff\";\n          ctx.fill();\n          ctx.fillStyle = \"white\";\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.font = \"16px Arial\";\n          ctx.fillText(`${icon.id + 1}`, 0, 0);\n        }\n\n        ctx.restore();\n      });\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [icons, images, iconPositions, isDragging, mousePos, targetRotation]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={700}\n      height={600}\n      onMouseDown={handleMouseDown}\n      onMouseMove={handleMouseMove}\n      onMouseUp={handleMouseUp}\n      onMouseLeave={handleMouseUp}\n      className=\"rounded-lg\"\n      aria-label=\"Interactive 3D Icon Cloud\"\n      role=\"img\"\n    />\n  );\n}\n"
}