{
    "id": "feature251",
    "access": "pro",
    "weight": 999,
    "disabled": false,
    "draft": false,
    "screenshot": "feature251.jpg",
    "thumbnail": "feature251-4x3.webp",
    "description": "A component featuring four cards with animations, icons, and text for showcasing features such as workflows, task tracking, and integrations.",
    "createdAt": "2025-05-04T23:59:42.805Z",
    "dependencies": [
        "motion",
        "react"
    ],
    "registryDependencies": [
        {
            "name": "globe",
            "registryId": "magicui",
            "registryItemUrl": "https://magicui.design/r/globe",
            "docsUrl": "https://magicui.design/docs/components/globe"
        },
        {
            "name": "card",
            "registryId": "shadcn",
            "registryItemUrl": "card",
            "docsUrl": "https://ui.shadcn.com/docs/components/card"
        }
    ],
    "attrs": {
        "type": "block",
        "group": [
            "feature"
        ],
        "price": [
            "pro"
        ],
        "release": [
            "Jun 2025"
        ],
        "registryIds": [
            "magicui",
            "shadcn"
        ]
    },
    "figma": true,
    "slug": "feature251",
    "collection": "block",
    "group": "feature",
    "code": "\"use client\";\n\nimport { motion } from \"motion/react\";\nimport React, { useRef } from \"react\";\nimport { RefObject, useEffect, useId, useState } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Globe } from \"@/components/magicui/globe\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\nconst Feature251 = () => {\n  const containerRef1 = useRef<HTMLDivElement>(null);\n  const containerRef2 = useRef<HTMLDivElement>(null);\n  const div1Ref = useRef<HTMLDivElement>(null);\n  const div2Ref = useRef<HTMLDivElement>(null);\n  const div3Ref = useRef<HTMLDivElement>(null);\n  const div4Ref = useRef<HTMLDivElement>(null);\n  const div5Ref = useRef<HTMLDivElement>(null);\n  const div6Ref = useRef<HTMLDivElement>(null);\n  const div7Ref = useRef<HTMLDivElement>(null);\n  return (\n    <section className=\"py-32\">\n      <div className=\"container\">\n        <div className=\"mx-auto flex max-w-5xl flex-wrap items-center justify-center gap-5\">\n          {/* 1st Card  */}\n          <Card className=\"w-166 relative h-96 rounded-3xl border\">\n            <CardHeader>\n              <h3 className=\"text-2xl font-semibold tracking-tight\">\n                Customizable Workflows\n              </h3>\n              <p className=\"text-muted-foreground/70 mt-2\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n                eiusmod tempor incididunt Lorem ipsum dolor sit amet,\n                consectetur\n              </p>\n            </CardHeader>\n            <CardContent ref={containerRef1} className=\"relative ml-5\">\n              <IconCard\n                ref={div1Ref as React.RefObject<HTMLDivElement>}\n                src=\"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/logos/google-icon.svg\"\n                className=\"mb-3\"\n              />\n              <IconCard\n                ref={div2Ref as React.RefObject<HTMLDivElement>}\n                src=\"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/logos/figma-icon.svg\"\n                className=\"translate-x-32\"\n              />\n              <IconCard\n                ref={div3Ref as React.RefObject<HTMLDivElement>}\n                src=\"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/logos/notion-icon.svg\"\n                className=\"mt-3\"\n              />\n              <IconCard\n                ref={div5Ref as React.RefObject<HTMLDivElement>}\n                src=\"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/block-1.svg\"\n                className=\"absolute right-12 top-1/2 -translate-y-1/2\"\n              />\n              <div\n                ref={div4Ref as React.RefObject<HTMLDivElement>}\n                className=\"z-99 bg-muted absolute left-1/2 top-1/2 h-4 w-4 -translate-y-1/2 rounded-full border\"\n              />\n              <AnimatedBeam\n                duration={3}\n                containerRef={containerRef1}\n                fromRef={div1Ref}\n                curvature={40}\n                toRef={div4Ref}\n              />\n              <AnimatedBeam\n                duration={3}\n                containerRef={containerRef1}\n                fromRef={div2Ref}\n                toRef={div4Ref}\n              />\n              <AnimatedBeam\n                duration={3}\n                containerRef={containerRef1}\n                fromRef={div3Ref}\n                curvature={-40}\n                toRef={div4Ref}\n              />\n              <AnimatedBeam\n                duration={3}\n                containerRef={containerRef1}\n                fromRef={div4Ref}\n                toRef={div5Ref}\n              />\n            </CardContent>\n          </Card>\n\n          {/* 2nd Card */}\n          <Card className=\"md:w-83 h-96 w-full rounded-3xl border\">\n            <CardHeader>\n              <h3 className=\"text-2xl font-semibold tracking-tight\">\n                Smart Task Tracking{\" \"}\n              </h3>\n              <p className=\"text-muted-foreground/70\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n              </p>\n            </CardHeader>\n            <CardContent\n              ref={containerRef2}\n              className=\"relative flex h-full flex-col items-center justify-between\"\n            >\n              <IconCard\n                ref={div6Ref as React.RefObject<HTMLDivElement>}\n                src=\"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/block-1.svg\"\n                className=\"mb-3\"\n              />\n\n              <IconCard\n                ref={div7Ref as React.RefObject<HTMLDivElement>}\n                src=\"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/logos/g2-icon.svg\"\n                className=\"mt-3\"\n              />\n\n              <AnimatedBeam\n                duration={3}\n                containerRef={containerRef2}\n                fromRef={div6Ref as React.RefObject<HTMLDivElement>}\n                direction=\"vertical\"\n                curvature={40}\n                toRef={div7Ref as React.RefObject<HTMLDivElement>}\n              />\n            </CardContent>\n          </Card>\n\n          {/* 3rd card */}\n          <Card className=\"relative flex h-96 w-full flex-col rounded-3xl border md:w-[330px]\">\n            <CardContent>\n              <img\n                src=\"https://deifkwefumgah.cloudfront.net/shadcnblocks/block/block-1.svg\"\n                className=\"mt-5 size-32\"\n                alt=\"\"\n              />\n            </CardContent>\n            <CardHeader className=\"mt-auto\">\n              <h3 className=\"text-2xl font-semibold tracking-tight\">\n                Seamless Integration & Real-Time Collaboration\n              </h3>\n              <p className=\"text-muted-foreground/70\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n              </p>\n            </CardHeader>\n          </Card>\n          {/* 4th card */}\n          <Card className=\"w-166 h-96 overflow-hidden rounded-3xl border\">\n            <CardHeader>\n              <h3 className=\"text-2xl font-semibold tracking-tight\">\n                Trusted by 100k Users{\" \"}\n              </h3>\n              <p className=\"text-muted-foreground/70\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n                eiusmod tempor incididunt Lorem ipsum dolor sit amet,\n                consectetur\n              </p>\n            </CardHeader>\n\n            <CardContent className=\"relative\">\n              <Globe className=\"-top-4\" />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport { Feature251 };\n\nconst IconCard = ({\n  src,\n  className,\n  ref,\n}: {\n  src: string;\n  className?: string;\n  ref: React.RefObject<HTMLDivElement>;\n}) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"bg-muted relative z-10 flex size-14 items-center justify-center rounded-xl\",\n        className,\n      )}\n    >\n      <img src={src} alt=\"Google\" className=\"size-5\" />\n      <HandleIcon className=\"absolute -top-3 left-1/2 size-6 -translate-x-1/2\" />\n      <HandleIcon className=\"absolute -bottom-3 left-1/2 size-6 -translate-x-1/2\" />\n      <HandleIcon className=\"absolute -left-3 top-1/2 size-6 -translate-y-1/2 rotate-90\" />\n      <HandleIcon className=\"absolute -right-3 top-1/2 size-6 -translate-y-1/2 rotate-90\" />\n    </div>\n  );\n};\n\nconst HandleIcon = (props: React.SVGProps<SVGSVGElement>) => {\n  return (\n    <svg\n      {...props}\n      width=\"14\"\n      height=\"5\"\n      viewBox=\"0 0 14 5\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <line\n        x1=\"0.543457\"\n        y1=\"0.972656\"\n        x2=\"0.543457\"\n        y2=\"4.625\"\n        stroke=\"black\"\n        strokeOpacity=\"0.2\"\n      />\n      <line\n        x1=\"4.54346\"\n        y1=\"0.972656\"\n        x2=\"4.54346\"\n        y2=\"4.625\"\n        stroke=\"black\"\n        strokeOpacity=\"0.2\"\n      />\n      <line\n        x1=\"8.54346\"\n        y1=\"0.972656\"\n        x2=\"8.54346\"\n        y2=\"4.625\"\n        stroke=\"black\"\n        strokeOpacity=\"0.2\"\n      />\n      <line\n        x1=\"12.5435\"\n        y1=\"0.972656\"\n        x2=\"12.5435\"\n        y2=\"4.625\"\n        stroke=\"black\"\n        strokeOpacity=\"0.2\"\n      />\n    </svg>\n  );\n};\n\n// Below is the modified component from Magic UI\n// Original source: https://magicui.design/docs/components/animated-beam\n// Modified to follow our coding standards and design system\n// We respect copyright and attribution to the original creators\n\nexport interface AnimatedBeamProps {\n  className?: string;\n  containerRef: RefObject<HTMLElement | null>; // Container ref\n  fromRef: RefObject<HTMLElement | null>;\n  toRef: RefObject<HTMLElement | null>;\n  curvature?: number;\n  reverse?: boolean;\n  pathColor?: string;\n  pathWidth?: number;\n  pathOpacity?: number;\n  gradientStartColor?: string;\n  gradientStopColor?: string;\n  delay?: number;\n  duration?: number;\n  startXOffset?: number;\n  startYOffset?: number;\n  endXOffset?: number;\n  endYOffset?: number;\n  direction?: \"horizontal\" | \"vertical\";\n}\n\nexport const AnimatedBeam: React.FC<AnimatedBeamProps> = ({\n  className,\n  containerRef,\n  fromRef,\n  toRef,\n  curvature = 0,\n  reverse = false, // Include the reverse prop\n  duration = Math.random() * 3 + 4,\n  delay = 0,\n  pathColor = \"gray\",\n  pathWidth = 2,\n  pathOpacity = 0.2,\n  gradientStartColor = \"#ffaa40\",\n  gradientStopColor = \"#9c40ff\",\n  startXOffset = 0,\n  startYOffset = 0,\n  endXOffset = 0,\n  endYOffset = 0,\n  direction = \"horizontal\",\n}) => {\n  const id = useId();\n  const [pathD, setPathD] = useState(\"\");\n  const [svgDimensions, setSvgDimensions] = useState({ width: 0, height: 0 });\n\n  // Calculate the gradient coordinates based on the reverse prop\n  const gradientCoordinates =\n    direction === \"vertical\"\n      ? reverse\n        ? {\n            x1: [\"0%\", \"0%\"],\n            x2: [\"0%\", \"0%\"],\n            y1: [\"90%\", \"-10%\"],\n            y2: [\"100%\", \"0%\"],\n          }\n        : {\n            x1: [\"0%\", \"0%\"],\n            x2: [\"0%\", \"0%\"],\n            y1: [\"10%\", \"110%\"],\n            y2: [\"0%\", \"100%\"],\n          }\n      : reverse\n        ? {\n            // Horizontal (existing logic)\n            x1: [\"90%\", \"-10%\"],\n            x2: [\"100%\", \"0%\"],\n            y1: [\"0%\", \"0%\"],\n            y2: [\"0%\", \"0%\"],\n          }\n        : {\n            x1: [\"10%\", \"110%\"],\n            x2: [\"0%\", \"100%\"],\n            y1: [\"0%\", \"0%\"],\n            y2: [\"0%\", \"0%\"],\n          };\n\n  useEffect(() => {\n    const updatePath = () => {\n      if (containerRef.current && fromRef.current && toRef.current) {\n        const containerRect = containerRef.current.getBoundingClientRect();\n        const rectA = fromRef.current.getBoundingClientRect();\n        const rectB = toRef.current.getBoundingClientRect();\n\n        const svgWidth = containerRect.width;\n        const svgHeight = containerRect.height;\n        setSvgDimensions({ width: svgWidth, height: svgHeight });\n\n        const startX =\n          rectA.left - containerRect.left + rectA.width / 2 + startXOffset;\n        const startY =\n          rectA.top - containerRect.top + rectA.height / 2 + startYOffset;\n        const endX =\n          rectB.left - containerRect.left + rectB.width / 2 + endXOffset;\n        const endY =\n          rectB.top - containerRect.top + rectB.height / 2 + endYOffset;\n\n        const controlY = startY - curvature;\n        const d = `M ${startX},${startY} Q ${\n          (startX + endX) / 2\n        },${controlY} ${endX},${endY}`;\n        setPathD(d);\n      }\n    };\n\n    // Initialize ResizeObserver\n    const resizeObserver = new ResizeObserver((entries) => {\n      // For all entries, recalculate the path\n      for (const entry of entries) {\n        updatePath();\n      }\n    });\n\n    // Observe the container element\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    // Call the updatePath initially to set the initial path\n    updatePath();\n\n    // Clean up the observer on component unmount\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [\n    containerRef,\n    fromRef,\n    toRef,\n    curvature,\n    startXOffset,\n    startYOffset,\n    endXOffset,\n    endYOffset,\n  ]);\n\n  return (\n    <svg\n      fill=\"none\"\n      width={svgDimensions.width}\n      height={svgDimensions.height}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\n        \"pointer-events-none absolute top-0 left-0 transform-gpu stroke-2\",\n        className,\n      )}\n      viewBox={`0 0 ${svgDimensions.width} ${svgDimensions.height}`}\n    >\n      <path\n        d={pathD}\n        stroke={pathColor}\n        strokeWidth={pathWidth}\n        strokeOpacity={pathOpacity}\n        strokeLinecap=\"round\"\n      />\n      <path\n        d={pathD}\n        strokeWidth={pathWidth}\n        stroke={`url(#${id})`}\n        strokeOpacity=\"1\"\n        strokeLinecap=\"round\"\n      />\n      <defs>\n        <motion.linearGradient\n          className=\"transform-gpu\"\n          id={id}\n          gradientUnits={\"userSpaceOnUse\"}\n          initial={{\n            x1: \"0%\",\n            x2: \"0%\",\n            y1: \"0%\",\n            y2: \"0%\",\n          }}\n          animate={{\n            x1: gradientCoordinates.x1,\n            x2: gradientCoordinates.x2,\n            y1: gradientCoordinates.y1,\n            y2: gradientCoordinates.y2,\n          }}\n          transition={{\n            delay,\n            duration,\n            ease: [0.16, 1, 0.3, 1],\n            repeat: Infinity,\n            repeatDelay: 0,\n          }}\n        >\n          <stop stopColor={gradientStartColor} stopOpacity=\"0\"></stop>\n          <stop stopColor={gradientStartColor}></stop>\n          <stop offset=\"32.5%\" stopColor={gradientStopColor}></stop>\n          <stop\n            offset=\"100%\"\n            stopColor={gradientStopColor}\n            stopOpacity=\"0\"\n          ></stop>\n        </motion.linearGradient>\n      </defs>\n    </svg>\n  );\n};\n"
}