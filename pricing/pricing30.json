{
    "id": "pricing30",
    "access": "pro",
    "weight": 999,
    "disabled": false,
    "draft": false,
    "screenshot": "pricing30.jpg",
    "thumbnail": "pricing30-4x3.webp",
    "description": "A component displays subscription plans with selectable features, highlighted options, and dynamic pricing details in a collapsible mobile layout and a 4-column desktop layout.",
    "createdAt": [
        3,
        "2025-01-23T07:49:23.379Z"
    ],
    "dependencies": [
        "lucide-react",
        "react"
    ],
    "registryDependencies": [
        {
            "name": "button",
            "registryId": "shadcn",
            "registryItemUrl": "button",
            "docsUrl": "https://ui.shadcn.com/docs/components/button"
        },
        {
            "name": "collapsible",
            "registryId": "shadcn",
            "registryItemUrl": "collapsible",
            "docsUrl": "https://ui.shadcn.com/docs/components/collapsible"
        }
    ],
    "attrs": {
        "type": "block",
        "group": [
            "pricing"
        ],
        "price": [
            "pro"
        ],
        "release": [
            "Feb 2025"
        ],
        "registryIds": [
            "shadcn"
        ]
    },
    "figma": false,
    "slug": "pricing30",
    "collection": "block",
    "group": "pricing",
    "code": "\"use client\";\n\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { useState } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\n\ntype PlanType = \"free\" | \"startup\" | \"enterprise\";\n\ninterface Plan {\n  name: string;\n  type: PlanType;\n  button: {\n    text: string;\n    variant: \"outline\";\n    href: string;\n  };\n  features: {\n    [Category in \"usage\" | \"features\" | \"support\"]: {\n      name: string;\n      value: string | boolean;\n    }[];\n  };\n}\n\nconst plans: Plan[] = [\n  {\n    name: \"Free\",\n    type: \"free\",\n    button: {\n      text: \"Get started\",\n      variant: \"outline\",\n      href: \"/signup\",\n    },\n    features: {\n      usage: [\n        { name: \"Members\", value: \"Unlimited\" },\n        { name: \"Transactions\", value: \"250\" },\n        { name: \"Teams\", value: \"2\" },\n      ],\n      features: [\n        { name: \"Reporting\", value: true },\n        { name: \"Analytics\", value: true },\n        { name: \"Import and export\", value: true },\n        { name: \"Integrations\", value: true },\n        { name: \"Mainline AI\", value: false },\n        { name: \"Admin roles\", value: false },\n        { name: \"Audit log\", value: false },\n      ],\n      support: [\n        { name: \"Priority Support\", value: true },\n        { name: \"Account Manager\", value: false },\n        { name: \"Uptime SLA\", value: false },\n      ],\n    },\n  },\n  {\n    name: \"Basic\",\n    type: \"startup\",\n    button: {\n      text: \"Get started\",\n      variant: \"outline\",\n      href: \"/signup\",\n    },\n    features: {\n      usage: [\n        { name: \"Members\", value: \"Unlimited\" },\n        { name: \"Transactions\", value: \"Unlimited\" },\n        { name: \"Teams\", value: \"Unlimited\" },\n      ],\n      features: [\n        { name: \"Reporting\", value: true },\n        { name: \"Analytics\", value: true },\n        { name: \"Import and export\", value: true },\n        { name: \"Integrations\", value: true },\n        { name: \"Mainline AI\", value: true },\n        { name: \"Admin roles\", value: false },\n        { name: \"Audit log\", value: false },\n      ],\n      support: [\n        { name: \"Priority Support\", value: true },\n        { name: \"Account Manager\", value: false },\n        { name: \"Uptime SLA\", value: false },\n      ],\n    },\n  },\n  {\n    name: \"Ent\",\n    type: \"enterprise\",\n    button: {\n      text: \"Get a demo\",\n      variant: \"outline\",\n      href: \"/\",\n    },\n    features: {\n      usage: [\n        { name: \"Members\", value: \"Unlimited\" },\n        { name: \"Transactions\", value: \"Unlimited\" },\n        { name: \"Teams\", value: \"Unlimited\" },\n      ],\n      features: [\n        { name: \"Reporting\", value: true },\n        { name: \"Analytics\", value: true },\n        { name: \"Import and export\", value: true },\n        { name: \"Integrations\", value: true },\n        { name: \"Mainline AI\", value: true },\n        { name: \"Admin roles\", value: false },\n        { name: \"Audit log\", value: false },\n      ],\n      support: [\n        { name: \"Priority Support\", value: true },\n        { name: \"Account Manager\", value: true },\n        { name: \"Uptime SLA\", value: true },\n      ],\n    },\n  },\n];\n\nexport const Pricing30 = () => {\n  const [selectedPlan, setSelectedPlan] = useState(1);\n\n  return (\n    <section className=\"py-32\">\n      <div className=\"container font-medium\">\n        <MobilePricingTable\n          selectedPlan={selectedPlan}\n          onPlanChange={setSelectedPlan}\n        />\n        <DesktopPricingTable />\n      </div>\n    </section>\n  );\n};\n\nconst MobilePricingTable = ({\n  selectedPlan,\n  onPlanChange,\n}: {\n  selectedPlan: number;\n  onPlanChange: (index: number) => void;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const plan = plans[selectedPlan];\n\n  return (\n    <div className=\"md:hidden\">\n      <Collapsible open={isOpen} onOpenChange={setIsOpen}>\n        <div className=\"flex items-center justify-between border-b py-4\">\n          <CollapsibleTrigger className=\"flex items-center gap-2\">\n            <h3 className=\"text-2xl font-semibold\">{plan.name}</h3>\n            <ChevronsUpDown\n              className={`size-5 transition-transform ${isOpen ? \"rotate-180\" : \"\"}`}\n            />\n          </CollapsibleTrigger>\n          <Button variant={plan.button.variant} className=\"w-fit\">\n            {plan.button.text}\n          </Button>\n        </div>\n        <CollapsibleContent className=\"flex flex-col space-y-2 p-2\">\n          {plans.map(\n            (p, index) =>\n              index !== selectedPlan && (\n                <Button\n                  size=\"lg\"\n                  variant=\"secondary\"\n                  key={index}\n                  onClick={() => {\n                    onPlanChange(index);\n                    setIsOpen(false);\n                  }}\n                >\n                  {p.name}\n                </Button>\n              ),\n          )}\n        </CollapsibleContent>\n      </Collapsible>\n\n      {/* Features List */}\n      <div className=\"mt-8\">\n        {Object.entries(plan.features).map(\n          ([category, features], sectionIndex) => (\n            <div key={sectionIndex} className=\"mb-8 space-y-2\">\n              <h3 className=\"mb-4 text-lg font-semibold capitalize\">\n                {category}\n              </h3>\n              {features.map((feature, featureIndex) => (\n                <div\n                  key={featureIndex}\n                  className=\"grid grid-cols-2 items-center gap-8\"\n                >\n                  <span className=\"border-b py-2\">{feature.name}</span>\n                  <div className=\"flex items-center gap-1 border-b py-2\">\n                    {typeof feature.value === \"boolean\" ? (\n                      feature.value ? (\n                        <Check className=\"size-5\" />\n                      ) : (\n                        <span className=\"size-5\" />\n                      )\n                    ) : (\n                      <div className=\"flex items-center gap-1\">\n                        <Check className=\"size-5\" />\n                        <span>{feature.value}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          ),\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst DesktopPricingTable = () => {\n  return (\n    <div className=\"hidden md:grid md:grid-cols-4\">\n      <FeaturesColumn />\n      {plans.map((plan, index) => (\n        <PricingColumn\n          key={plan.name}\n          plan={plan}\n          isHighlighted={index === 1}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst FeaturesColumn = () => (\n  <div>\n    <div className=\"h-[140px]\" /> {/* Spacer for plan header alignment */}\n    {Object.entries(plans[0].features).map(([category, features], index) => (\n      <div key={index}>\n        <h3 className=\"flex h-20 items-center text-lg font-semibold capitalize\">\n          {category}\n        </h3>\n        {features.map((feature, featureIndex) => (\n          <div key={featureIndex} className=\"py-4\">\n            {feature.name}\n          </div>\n        ))}\n      </div>\n    ))}\n  </div>\n);\n\nconst PricingColumn = ({\n  plan,\n  isHighlighted,\n}: {\n  plan: Plan;\n  isHighlighted: boolean;\n}) => {\n  const columnClass = cn(\"px-6\", isHighlighted && \"bg-muted border rounded-xl\");\n\n  return (\n    <div className={columnClass}>\n      {/* Plan Header */}\n      <div className=\"py-8\">\n        <h3 className=\"mb-3 text-2xl font-semibold\">{plan.name}</h3>\n        <Button variant={plan.button.variant} asChild>\n          <a href={plan.button.href}>{plan.button.text}</a>\n        </Button>\n      </div>\n\n      {/* Features */}\n      {Object.entries(plan.features).map(([, features], sectionIndex) => (\n        <div key={sectionIndex}>\n          <div className=\"flex h-20 items-center\"></div> {/* space */}\n          {features.map((feature, featureIndex) => (\n            <div\n              key={featureIndex}\n              className=\"flex items-center gap-1 border-b py-4\"\n            >\n              {typeof feature.value === \"boolean\" ? (\n                feature.value ? (\n                  <Check className=\"size-5\" />\n                ) : (\n                  <span className=\"size-5\" />\n                )\n              ) : (\n                <div className=\"flex items-center gap-1\">\n                  <Check className=\"size-4\" />\n                  <span>{feature.value}</span>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n"
}